/****************************************************************************
**
** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights.  These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
**
**
**
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \example statemachine/eventtransitions
    \title Event Transitions Example

    The Event Transitions example shows how to use event transitions, a
    feature of \l{The State Machine Framework}.

    \snippet examples/statemachine/eventtransitions/main.cpp 0

    The \c Window class's constructors begins by creating a button.

    \snippet examples/statemachine/eventtransitions/main.cpp 1

    Two states, \c s1 and \c s2, are created; upon entry they will assign
    "Outside" and "Inside" to the button's text, respectively.

    \snippet examples/statemachine/eventtransitions/main.cpp 2

    When the button receives an event of type QEvent::Enter and the state
    machine is in state \c s1, the machine will transition to state \c s2.

    \snippet examples/statemachine/eventtransitions/main.cpp 3

    When the button receives an event of type QEvent::Leave and the state
    machine is in state \c s2, the machine will transition back to state \c
    s1.

    \snippet examples/statemachine/eventtransitions/main.cpp 4

    Next, the state \c s3 is created. \c s3 will be entered when the button
    receives an event of type QEvent::MouseButtonPress and the state machine
    is in state \c s2. When the button receives an event of type
    QEvent::MouseButtonRelease and the state machine is in state \c s3, the
    machine will transition back to state \c s2.

    \snippet examples/statemachine/eventtransitions/main.cpp 5

    Finally, the states are added to the machine as top-level states, the
    initial state is set to be \c s1 ("Outside"), and the machine is started.

    \snippet examples/statemachine/eventtransitions/main.cpp 6

    The main() function constructs a Window object and shows it.

*/
