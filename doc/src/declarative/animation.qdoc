/****************************************************************************
**
** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial Usage
** Licensees holding valid Qt Commercial licenses may use this file in
** accordance with the Qt Commercial License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in a
** written agreement between you and Nokia.
**
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of this
** file.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\page qdeclarativeanimation.html
\title QML Animation

Animation in QML is done by animating properties of objects. Properties of type
real, int, color, rect, point, size, and vector3d can all be animated.

QML supports three main forms of animation: basic property animation,
transitions, and property behaviors.

\tableofcontents

\section1 Basic Property Animation

The simplest form of animation is a \l PropertyAnimation, which can animate all of the property
types listed above. If the property you are animating is a number or color, you can alternatively use
NumberAnimation or ColorAnimation. These elements don't add any additional functionality,
but will help enforce type correctness and are slightly more efficient.

A property animation can be specified as a value source using the \e Animation \bold on \e property syntax. This is especially useful
for repeating animations.

The following example creates a bouncing effect:
\snippet doc/src/snippets/declarative/animation.qml property-anim-1

\image propanim.gif

When you assign an animation as a value source, you do not need to specify \c property
or \c target values; they are automatically selected for you. You do, however, need to specify a \c to value.
An animation specified as a value source will be \c running by default.

For example, here is a rectangle that uses a \l NumberAnimation value source to animate the movement
from its current position to an \c x value of 50. The animation starts immediately, and only the \c to 
property is required:

\snippet doc/src/snippets/declarative/animation.qml property-anim-2

A property animation can also be specified as a resource that is manipulated from script.

\snippet doc/src/snippets/declarative/animation.qml property-anim-3

As can be seen, when an animation is used like this (as opposed to as a value source) you will need
to explicitly set the \c target and \c property to animate.

Animations can be joined into a group using SequentialAnimation and ParallelAnimation.

\target state-transitions
\section1 Transitions

QML transitions describe animations to perform when \l{qmlstates}{state} changes occur. A transition
can only be triggered by a state change.

For example, a transition could describe how an item moves from its initial position to its new position:

\snippet doc/src/snippets/declarative/animation.qml transitions-1

As can be seen, transitions make use of the same basic animation classes introduced above.
In the above example we have specified that we want to animate the \c x and \c y properties, but have not
specified the objects to animate or the \c to values. By default these values are supplied by the framework;
the animation will animate any \c targets whose \c x and \c y have changed, and the \c to values will be those
defined in the end state. You can always supply explicit values to override these implicit values when needed.

\snippet doc/src/snippets/declarative/animation.qml transitions-2

QML transitions have selectors to determine which state changes a transition should apply to.
The following transition will only be triggered when we enter into the \c "details" state.
(The "*" value is a wildcard value that specifies the transition should be applied when changing
from \e any state to the "details" state.)

\code
Transition {
    from: "*"
    to: "details"
    ...
}
\endcode

Transitions can happen in parallel, in sequence, or in any combination of the two. By default, the top-level
animations in a transition will happen in parallel. The following example shows a rather complex transition
making use of both sequential and parallel animations:

\snippet doc/src/snippets/declarative/animation.qml transitions-3

\section1 Property Behaviors

A \l{Behavior}{property behavior} specifies a default animation to run whenever the property's value changes, regardless
of what caused the change. The \c enabled property can be used to force a \l Behavior
to only apply under certain circumstances.

In the following snippet, we specify that we want the \c x position of \c redRect to be animated
whenever it changes. The animation will last 300 milliseconds and use an \l{PropertyAnimation::easing.type}{Easing.InOutQuad} easing curve.

\snippet doc/src/snippets/declarative/animation.qml behavior

Like using an animation as a value source, when used in a Behavior and animation does not need to specify
a \c target or \c property.

To trigger this behavior, we could enter a state that changes \c x:

\qml
State {
    name: "myState"
    PropertyChanges {
        target: redRect
        x: 200
        ...
    }
}
\endqml

Or, update \c x from a script:

\qml
MouseArea {
    ....
    onClicked: redRect.x = 24;
}
\endqml

If \c x were bound to another property, triggering the binding would also trigger the behavior.

If a state change has a transition animation matching a property with a \l Behavior, the transition animation
will override the \l Behavior for that state change.

*/
