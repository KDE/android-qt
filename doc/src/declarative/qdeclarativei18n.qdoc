/****************************************************************************
**
** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights.  These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
**
**
**
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\page qdeclarativei18n.html
\title QML Internationalization

\section1 Overview

Strings in QML can be marked for translation using the qsTr(), qsTranslate(),
QT_TR_NOOP(), and QT_TRANSLATE_NOOP() functions.

For example:
\qml
Text { text: qsTr("Pictures") }
\endqml

These functions are standard QtScript functions; for more details see
QScriptEngine::installTranslatorFunctions().

QML relies on the core internationalization capabilities provided by Qt. These
capabilities are described more fully in:
\list
\o \l {Internationalization with Qt}
\o \l {Qt Linguist Manual}
\endlist

You can test a translation with the \l {Qt Declarative UI Runtime}{qml} tool using the -translation option.

\section1 Example

First we create a simple QML file with text to be translated. The string
that needs to be translated is enclosed in a call to \c qsTr().

hello.qml:
\qml
import Qt 4.7

Rectangle {
 width: 200; height: 200
 Text { text: qsTr("Hello"); anchors.centerIn: parent }
}
\endqml

Next we create a translation source file using lupdate:
\code
lupdate hello.qml -ts hello.ts
\endcode

Then we open \c hello.ts in \l{Qt Linguist Manual} {Linguist}, provide
a translation and create the release file \c hello.qm.

Finally, we can test the translation:
\code
qml -translation hello.qm hello.qml
\endcode
*/
