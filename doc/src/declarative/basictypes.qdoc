/****************************************************************************
**
** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights.  These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
**
**
**
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
  \page qdeclarativebasictypes.html
  \title QML Basic Types

  QML uses a set of property types, which are primitive within QML.
  These basic types are referenced throughout the documentation of the
  QML elements. Almost all of them are exactly what you would expect.

  \annotatedlist qmlbasictypes
*/

/*!
  \qmlbasictype int
  \ingroup qmlbasictypes

  \brief An integer is a whole number, e.g. 0, 10, or -20.  

  An integer is a whole number, e.g. 0, 10, or -20.  The possible \c
  int values range from around -2000000000 to around 2000000000,
  although most elements will only accept a reduced range (which they
  mention in their documentation).

  Example:
  \qml
  Item { width: 100; height: 200 }
  \endqml

  \sa {QML Basic Types}
*/

/*!
  \qmlbasictype bool
  \ingroup qmlbasictypes

  \brief A boolean is a binary true/false value.

  A boolean is a binary true/false value.

  Example:
  \qml
  Item { focus: true; clip: false }
  \endqml

  \sa {QML Basic Types}
*/

/*!
  \qmlbasictype real
  \ingroup qmlbasictypes

  \brief A real number has a decimal point, e.g. 1.2 or -29.8.

  A real number has a decimal point, e.g. 1.2 or -29.8.

  Example:
  \qml
  Item { width: 100.45; height: 150.82 }
  \endqml

  \note In QML all reals are stored in single precision, \l
  {http://en.wikipedia.org/wiki/IEEE_754} {IEEE floating point}
  format.

  \sa {QML Basic Types}
*/

/*!
  \qmlbasictype string
  \ingroup qmlbasictypes

  \brief A string is a free form text in quotes, e.g. "Hello world!".

  A string is a free form text in quotes, e.g. "Hello world!".

  Example:
  \qml
  Text { text: "Hello world!" }
  \endqml

  \sa {QML Basic Types}
*/

/*!
  \qmlbasictype url
  \ingroup qmlbasictypes

  \brief A URL is a resource locator, like a file name. 

  A URL is a resource locator, like a file name.  It can be either
  absolute, e.g. "http://qt.nokia.com", or relative, e.g.
  "pics/logo.png". A relative URL is resolved relative to the URL of
  the component where the URL is converted from a JavaScript string
  expression to a url property value.

  Example:
  \qml
  Image { source: "pics/logo.png" }
  \endqml

  \raw HTML
  \endraw

  \sa {QML Basic Types}
*/

/*!
  \qmlbasictype color
  \ingroup qmlbasictypes

  \brief A color is a standard color name in quotes.

  A color is a standard color name in quotes. It is normally specified
  as an \l {http://www.w3.org/TR/SVG/types.html#ColorKeywords} {SVG
  color name}.  These names include colors like "red", "green" and
  "lightsteelblue".

  If the color you want isn't part of this list, colors can also be
  specified in hexidecimal triplets or quads that take the form \c
  "#RRGGBB" and \c "#AARRGGBB" respectively.  For example, the color
  red corresponds to a triplet of \c "#FF0000" and a slightly
  transparent blue to a quad of \c "#800000FF".

  Example:
  \qml
  Rectangle { color: "steelblue" }
  Rectangle { color: "#FF0000" }
  Rectangle { color: "#800000FF" }
  \endqml

  \sa {QML Basic Types}
*/

/*!
  \qmlbasictype point
  \ingroup qmlbasictypes

  \brief A point is specified as "x,y".

  A point is specified as "x,y".

  Example:
  \qml
  Widget { pos: "0,20" }
  \endqml

  \sa {QML Basic Types}
*/

/*!
  \qmlbasictype size
  \ingroup qmlbasictypes

  \brief A size is specified as "width x height".

  A size is specified as "width x height".

  Example:
  \qml
  Widget { size: "150x50" }
  \endqml

  \sa {QML Basic Types}
*/

/*!
  \qmlbasictype rect
  \ingroup qmlbasictypes

  \brief A rect is specified as "x, y, width x height".

  A rect is specified as "x, y, width x height".

  Example:
  \qml
  Widget { geometry: "50,50,100x100" }
  \endqml

  \sa {QML Basic Types}
*/

/*!
  \qmlbasictype date
  \ingroup qmlbasictypes

  \brief A date is specified as "YYYY-MM-DD".

  A date is specified as "YYYY-MM-DD".

  Example:
  \qml
  DatePicker { minDate: "2000-01-01"; maxDate: "2020-12-31" }
  \endqml

  \sa {QML Basic Types}
*/

/*!
  \qmlbasictype time
  \ingroup qmlbasictypes

  \brief A time is specified as "hh:mm:ss".

  A time is specified as "hh:mm:ss".

  Example:
  \qml
  TimePicker { time: "14:22:15" }
  \endqml

  \sa {QML Basic Types}
 */

/*!
  \qmlbasictype font
  \ingroup qmlbasictypes

  \brief A font type has the properties of a QFont.

  A font type has the properties of a QFont. The properties are:

  \list
  \o \c string font.family
  \o \c bool font.bold
  \o \c bool font.italic
  \o \c bool font.underline
  \o \c real font.pointSize
  \o \c int font.pixelSize
  \endlist

  Example:
  \qml
  Text { font.family: "Helvetica"; font.pointSize: 13; font.bold: true }
  \endqml

  \sa {QML Basic Types}
*/

/*!
  \qmlbasictype action
  \ingroup qmlbasictypes

  \brief The action type has all the properties of QAction.

  The action type has all the properties of QAction. The properties
  are:

  \list
  \o \c slot action.trigger - invoke the action
  \o \c bool action.enabled - true if the action is enabled
  \o \c string action.text - the text associated with the action
  \endlist

  Actions are used like this:

  \qml
  MouseArea { onClicked: MyItem.myaction.trigger() }
  State { name: "enabled"; when: MyItem.myaction.enabled == true }
  Text { text: MyItem.someaction.text }
  \endqml

  \sa {QML Basic Types}
*/

/*!
  \qmlbasictype list
  \ingroup qmlbasictypes

  \brief A list of objects.

  A list of objects.  While not technically a basic type, QML also
  supports lists of object types. When used from QML, the engine
  automatically appends each value to the list.

  For example, the \l Item class contains a list property named
  children that can be used like this:

  \qml
  Item {
    children: [
      Item { id: child1 },
      Rectangle { id: child2 },
      Text { id: child3 }
    ]
  }
  \endqml
  \c Child1, \c Child2 and \c Child3 will all be added to the children list
  in the order in which they appear.

  \sa {QML Basic Types}
*/

/*!
  \qmlbasictype vector3d
  \ingroup qmlbasictypes

  \brief A vector3d is specified as "x,y,z".

  A vector3d is specified as "x,y,z".

  \qml
  Rotation { angle: 60; axis: "0,1,0" }
  \endqml

  or with the \c{Qt.vector3d()} helper function:

  \qml
  Rotation { angle: 60; axis: Qt.vector3d(0, 1, 0) }
  \endqml

  or as separate \c x, \c y, and \c z components:

  \qml
  Rotation { angle: 60; axis.x: 0; axis.y: 1; axis.z: 0 }
  \endqml

  \sa {QML Basic Types}
*/
