/****************************************************************************
**
** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights.  These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
**
**
**
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \page winsystem.html
    \title Window System Specific Notes
    \ingroup platform-specific
    \brief Collections of notes about Qt implementations on different window systems.

    Qt is a cross-platform GUI toolkit, so almost the entire API is the
    same on all platforms and window systems. If you wish to use
    platform-specific features, and still maintain a platform-independent
    source tree, you should protect the platform-specific code using the
    appropriate \c{#ifdef} directives (see below).

    Qt provides a few low-level global functions for fine-tuning
    applications on specific platforms. See \l{Platform-Specific
    Functions} for details.

    \tableofcontents

    For information about which platforms are supported by Qt, see the
    \l{Platform Notes}. For information on distributing Qt applications, see
    \l{Deploying Qt Applications}.

    \target x11
    \section1 Qt for X11

    When compiling for this platform, the macro \c{Q_WS_X11} is defined.

    \e{Not documented here. Please contact Qt's technical support team
    if you have queries.}

    See the \l{Qt for X11 Requirements} page for more information about the
    libraries required to build Qt with as many features as possible.

    \target win
    \section1 Qt for Windows

    When compiling for this platform, the macro \c{Q_WS_WIN} is defined.

    \e{Not documented here. Please contact Qt's technical support team
    if you have queries.}

    \target macosx
    \section1 Qt for Mac OS X

    When compiling for this platform, the macro \c{Q_WS_MAC} is defined.

    \list
    \i \l{Qt for Mac OS X - Specific Issues}
    \i \l{Qt is Mac OS X Native}
    \endlist

    \target qws
    \section1 Qt for Embedded Linux

    When compiling for this platform, the macro \c{Q_WS_QWS} is
    defined (the window system is literally the Qt Window System). See
    the \l{Qt for Embedded Linux} documentation for more information.

    \section1 Qt for Windows CE

    When compiling for this platform, the macro \c{Q_WS_WINCE} is defined.
    See the \l{Qt for Windows CE} documentation for more information.

    \section1 Qt for the Symbian platform

    When compiling for this platform, the macro \c{Q_WS_S60} is defined.
    See the \l{The Symbian platform - Introduction to Qt} documentation for
    more information.
*/
