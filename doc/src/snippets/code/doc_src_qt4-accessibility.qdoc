/****************************************************************************
**
** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights.  These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
**
**
**
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

//! [environment]
export QT_ACCESSIBILITY=1
//! [environment]

//! [0]
class MyWidgetInterface : public QAccessibleWidget
{
public:
    MyWidgetInterface(QWidget *widget, Role role);

    QString text(Text text, int child) const;
    State state(int child) const;
    QString actionText(int action, Text text, int child) const;
    bool doAction(int action, int child, const QVariantList &params);
    ...
};
//! [0]


//! [1]
bool MyWidgetInterface::doAction(int action, int child,
                                 const QVariantList &params)
{
    if (child || !widget()->isEnabled())
        return false;

    switch (action) {
    case DefaultAction:
    case Press:
        {
            MyWidget *widget = qobject_cast<MyWidget *>(object());
            if (widget)
                widget->click();
        }
        return true;
    }
    return QAccessibleWidget::doAction(action, child, params);
}
//! [1]


//! [2]
QStringList MyFactory::keys() const
{
    return QStringList() << "MyWidget" << "MyOtherWidget";
}

QAccessibleInterface *MyFactory::create(const QString &className,
                                        QObject *object)
{
    if (classname == "MyWidget")
        return new MyWidgetInterface(object);
    if (classname == "MyOtherWidget")
        return new MyOtherWidgetInterface(object);
    return 0;
}

Q_EXPORT_PLUGIN2(myfactory, MyFactory)
//! [2]
