/****************************************************************************
**
** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights.  These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
**
**
**
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \namespace QSql
    \inmodule QtSql
    \brief The QSql namespace contains miscellaneous identifiers used throughout
    the Qt SQL library.

    \inheaderfile QtSql
    \ingroup database


    \sa {QtSql Module}
*/

/*!
    \enum QSql::Confirm
    \compat

    This enum type describes edit confirmations.

    \value Yes
    \value No
    \value Cancel
*/

/*!
    \enum QSql::Op
    \compat

    This enum type describes edit operations.

    \value None
    \value Insert
    \value Update
    \value Delete
*/


/*!
    \enum QSql::Location

    This enum type describes special SQL navigation locations:

    \value BeforeFirstRow Before the first record.
    \value AfterLastRow After the last record.

    \omitvalue BeforeFirst
    \omitvalue AfterLast

    \sa QSqlQuery::at()
*/

/*!
    \enum QSql::ParamTypeFlag

    This enum is used to specify the type of a bind parameter.

    \value In  The bind parameter is used to put data into the database.
    \value Out  The bind parameter is used to receive data from the database.
    \value InOut  The bind parameter is used to put data into the
        database; it will be overwritten with output data on executing
        a query.
    \value Binary This must be OR'd with one of the other flags if
           you want to indicate that the data being transferred is
           raw binary data.
*/

/*!
    \enum QSql::TableType

    This enum type describes types of SQL tables.

    \value Tables  All the tables visible to the user.
    \value SystemTables  Internal tables used by the database.
    \value Views  All the views visible to the user.
    \value AllTables  All of the above.
*/

/*!
    \enum QSql::NumericalPrecisionPolicy

    This enum type describes at which precision levels numercial values are read from
    a database.

    Some databases support numerical values with a precision that is not storable in a
    C++ basic data type. The default behavior is to bind these values as a QString.
    This enum can be used to override this behavior.

    \value LowPrecisionInt32  Force 32bit integer values. In case of floating point numbers,
                              the fractional part is silently discarded.
    \value LowPrecisionInt64  Force 64bit integer values. In case of floating point numbers,
                              the fractional part is silently discarded.
    \value LowPrecisionDouble Force \c double values.
    \value HighPrecision      The default behavior - try to preserve maximum precision.

    Note: The actual behaviour if an overflow occurs is driver specific. The Oracle database
    just returns an error in this case.
*/

