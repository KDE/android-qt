#
# qmake configuration for building with arm-linux-g++
#

include(../common/g++.conf)
include(../common/linux.conf)
include(../common/qws.conf)
TEMPLATE                = lib
CONFIG			= dll qt warn_on release link_prl ashmem android android_custom_ndk #android_official_ndk
QT                      = core network xml svg gui android

NDK_ROOT = /usr/local/qadk

#NDK_ROOT = $(ANDROID_NDK_ROOT)

NDK_TOOLCHAIN = arm-eabi-4.4.0

ANDROID_PLATFORM = android-5

ANDROID_TOOLCHAIN_ROOT = $$NDK_ROOT/build/platforms/$$ANDROID_PLATFORM/arch-arm/usr

CONFIG			+= $$ANDROID_PLATFORM

# modifications to g++.conf
QMAKE_CC                = $$NDK_ROOT/build/prebuilt/linux-x86/$$NDK_TOOLCHAIN/bin/arm-eabi-gcc
QMAKE_CFLAGS		= -march=armv5te -mtune=xscale -msoft-float -mfpu=neon -fpic -mthumb-interwork -ffunction-sections -funwind-tables -fstack-protector -fno-short-enums -DANDROID -D__ARM_ARCH_5__ -D__ARM_ARCH_5T__ -D__ARM_ARCH_5E__ -D__ARM_ARCH_5TE__ 
QMAKE_CFLAGS_WARN_ON	= -Wall -W
QMAKE_CFLAGS_WARN_OFF	=
QMAKE_CFLAGS_RELEASE	= -O2 -fomit-frame-pointer -funswitch-loops -finline-limit=300
QMAKE_CFLAGS_DEBUG	= -marm -fno-omit-frame-pointer
QMAKE_CFLAGS_SHLIB	= -fPIC
QMAKE_CFLAGS_YACC	= -Wno-unused -Wno-parentheses
QMAKE_CFLAGS_THREAD	= -D_REENTRANT
QMAKE_CFLAGS_HIDESYMS   = -fvisibility=hidden

QMAKE_CXX               = $$NDK_ROOT/build/prebuilt/linux-x86/$$NDK_TOOLCHAIN/bin/arm-eabi-g++
QMAKE_CXXFLAGS		= $$QMAKE_CFLAGS -DQT_NO_QWS_TRANSFORMED -fno-exceptions -fno-rtti
QMAKE_CXXFLAGS_WARN_ON	= $$QMAKE_CFLAGS_WARN_ON
QMAKE_CXXFLAGS_WARN_OFF	= $$QMAKE_CFLAGS_WARN_OFF
QMAKE_CXXFLAGS_RELEASE	+= $$QMAKE_CFLAGS_RELEASE
QMAKE_CXXFLAGS_DEBUG	+= $$QMAKE_CFLAGS_DEBUG
QMAKE_CXXFLAGS_SHLIB	= $$QMAKE_CFLAGS_SHLIB
QMAKE_CXXFLAGS_YACC	= $$QMAKE_CFLAGS_YACC
QMAKE_CXXFLAGS_THREAD	= $$QMAKE_CFLAGS_THREAD
QMAKE_CXXFLAGS_HIDESYMS = $$QMAKE_CFLAGS_HIDESYMS -fvisibility-inlines-hidden

QMAKE_LINK              = $$QMAKE_CXX
QMAKE_LINK_SHLIB        = $$QMAKE_LINK

# modifications to linux.conf
QMAKE_AR                = $$NDK_ROOT/build/prebuilt/linux-x86/$$NDK_TOOLCHAIN/bin/arm-eabi-ar cqs
QMAKE_OBJCOPY           = $$NDK_ROOT/build/prebuilt/linux-x86/$$NDK_TOOLCHAIN/bin/arm-eabi-objcopy
QMAKE_STRIP             = $$NDK_ROOT/build/prebuilt/linux-x86/$$NDK_TOOLCHAIN/bin/arm-eabi-strip
QMAKE_RANLIB            = $$NDK_ROOT/build/prebuilt/linux-x86/$$NDK_TOOLCHAIN/bin/arm-eabi-ranlib

QMAKE_INCDIR		= $$ANDROID_TOOLCHAIN_ROOT/include
QMAKE_LIBDIR		= $$ANDROID_TOOLCHAIN_ROOT/lib
QMAKE_INCDIR_X11	=
QMAKE_LIBDIR_X11	=
QMAKE_INCDIR_QT		=
QMAKE_LIBDIR_QT		=
QMAKE_INCDIR_OPENGL	= $$ANDROID_TOOLCHAIN_ROOT/include
QMAKE_LIBDIR_OPENGL	= $$ANDROID_TOOLCHAIN_ROOT/lib
QMAKE_INCDIR_QTOPIA	=
QMAKE_LIBDIR_QTOPIA	=

LIBGCC_PATH = $$system($$QMAKE_CC -mthumb-interwork -print-libgcc-file-name | xargs dirname)

QMAKE_LINK		= $$QMAKE_CXX
QMAKE_LINK_SHLIB	= $$QMAKE_CXX
QMAKE_LFLAGS		= -nostdlib -Wl,-rpath-link=$$ANDROID_TOOLCHAIN_ROOT/lib -L$$LIBGCC_PATH -Wl,-rpath=/data/local/qt/lib -Wl,-rpath=/data/local/lib -Wl,-rpath=/system/lib 
#QMAKE_LFLAGS_RELEASE	= -Wl,-O1
QMAKE_LFLAGS_RELEASE    =
#QMAKE_LFLAGS_DEBUG	=
QMAKE_LFLAGS_APP	= -Bdynamic -Wl,-dynamic-linker,/system/bin/linker -Wl,--gc-sections -Wl,-z,nocopyreloc
QMAKE_LFLAGS_SHLIB	= -lui -Wl,-shared,-Bsymbolic -Wl,--no-whole-archive
QMAKE_LFLAGS_PLUGIN	= $$QMAKE_LFLAGS_SHLIB
QMAKE_LFLAGS_SONAME	= -Wl,-soname,
#QMAKE_LFLAGS_THREAD	 =
QMAKE_LFLAGS_NOUNDEF    = -Wl,--no-undefined
QMAKE_RPATH		= -Wl,-rpath=

QMAKE_LIBS		= -lstlport -llog -lm -lstdc++ -lc -lgcc
QMAKE_LIBS_X11		=
QMAKE_LIBS_X11SM	=
QMAKE_LIBS_QT_THREAD	=
QMAKE_LIBS_QT_OPENGL	=
QMAKE_LIBS_QTOPIA	=
QMAKE_LIBS_THREAD	=
QMAKE_LIBS_EGL          =
QMAKE_LIBS_OPENGL       =
QMAKE_LIBS_OPENGL_QT    =
QMAKE_LIBS_OPENGL_ES1   = -lGLESv1_CM
QMAKE_LIBS_OPENGL_ES2   = -lGLESv2

#QMAKE_MOC		= $$[QT_INSTALL_BINS]/moc
#QMAKE_UIC		= $$[QT_INSTALL_BINS]/uic

load(qt_config)
