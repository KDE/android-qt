#
# qmake configuration for building with arm-linux-g++
#

include(../common/g++.conf)
include(../common/linux.conf)
include(../common/qws.conf)

CONFIG			+= qt warn_on release link_prl
QT                      += core network xml svg gui

NDK_ROOT=/usr/local/android-ndk-1.6_r1/

# modifications to g++.conf
QMAKE_CC                = $$NDK_ROOT/build/prebuilt/linux-x86/arm-eabi-4.2.1/bin/arm-eabi-gcc
QMAKE_CFLAGS		= -DANDROID -D__ARM_ARCH_5__ -D__ARM_ARCH_5T__ -D__ARM_ARCH_5E__ -D__ARM_ARCH_5TE__ -DSK_RELEASE -march=armv5te -mtune=xscale -msoft-float -mthumb-interwork -ffunction-sections -funwind-tables -fstack-protector -fno-exceptions -fmessage-length=0
QMAKE_CFLAGS_WARN_ON	= -Wall -W
QMAKE_CFLAGS_WARN_OFF	=
QMAKE_CFLAGS_RELEASE	= -O3 -fomit-frame-pointer -fno-strict-aliasing -funswitch-loops -finline-limit=300 -fno-default-inline
QMAKE_CFLAGS_DEBUG	= -g
QMAKE_CFLAGS_SHLIB	= -fPIC
QMAKE_CFLAGS_YACC	= -Wno-unused -Wno-parentheses
QMAKE_CFLAGS_THREAD	= -D_REENTRANT
QMAKE_CFLAGS_HIDESYMS   = -fvisibility=hidden

QMAKE_CXX               = $$NDK_ROOT/build/prebuilt/linux-x86/arm-eabi-4.2.1/bin/arm-eabi-g++
QMAKE_CXXFLAGS		= $$QMAKE_CFLAGS -DQT_NO_QWS_TRANSFORMED -fno-rtti
QMAKE_CXXFLAGS_WARN_ON	= $$QMAKE_CFLAGS_WARN_ON
QMAKE_CXXFLAGS_WARN_OFF	= $$QMAKE_CFLAGS_WARN_OFF
QMAKE_CXXFLAGS_RELEASE	= $$QMAKE_CFLAGS_RELEASE
QMAKE_CXXFLAGS_DEBUG	= $$QMAKE_CFLAGS_DEBUG
QMAKE_CXXFLAGS_SHLIB	= $$QMAKE_CFLAGS_SHLIB
QMAKE_CXXFLAGS_YACC	= $$QMAKE_CFLAGS_YACC
QMAKE_CXXFLAGS_THREAD	= $$QMAKE_CFLAGS_THREAD
QMAKE_CXXFLAGS_HIDESYMS = $$QMAKE_CFLAGS_HIDESYMS -fvisibility-inlines-hidden

QMAKE_LINK              = $$QMAKE_CXX
QMAKE_LINK_SHLIB        = $$QMAKE_LINK

# modifications to linux.conf
QMAKE_AR                = $$NDK_ROOT/build/prebuilt/linux-x86/arm-eabi-4.2.1/bin/arm-eabi-ar cqs
QMAKE_OBJCOPY           = $$NDK_ROOT/build/prebuilt/linux-x86/arm-eabi-4.2.1/bin/arm-eabi-objcopy
QMAKE_STRIP             = $$NDK_ROOT/build/prebuilt/linux-x86/arm-eabi-4.2.1/bin/arm-eabi-strip
QMAKE_RANLIB            = $$NDK_ROOT/build/prebuilt/linux-x86/arm-eabi-4.2.1/bin/arm-eabi-ranlib

QMAKE_INCDIR		= $$NDK_ROOT/build/platforms/android-4/arch-arm/usr/include
QMAKE_LIBDIR		= $$NDK_ROOT/build/platforms/android-4/arch-arm/usr/lib
QMAKE_INCDIR_X11	=
QMAKE_LIBDIR_X11	=
QMAKE_INCDIR_QT		= 
QMAKE_LIBDIR_QT		= 
QMAKE_INCDIR_OPENGL	= $$NDK_ROOT/build/platforms/android-4/arch-arm/usr/include
QMAKE_LIBDIR_OPENGL	= $$NDK_ROOT/build/platforms/android-4/arch-arm/usr/lib
QMAKE_INCDIR_QTOPIA	= 
QMAKE_LIBDIR_QTOPIA	= 

QMAKE_LINK		= $$QMAKE_CXX
QMAKE_LINK_SHLIB	= $$QMAKE_CXX
QMAKE_LFLAGS		= -nostdlib -Bdynamic -Wl,-T,$$NDK_ROOT/build/prebuilt/linux-x86/arm-eabi-4.2.1/arm-eabi/lib/ldscripts/armelf.xc -Wl,-dynamic-linker,/system/bin/linker -Wl,--gc-sections -Wl,-z,nocopyreloc -Wl,--no-undefined -L$$NDK_ROOT/build/platforms/android-4/arch-arm/usr/lib -Wl,-rpath-link=$$NDK_ROOT/build/platforms/android-4/arch-arm/usr/lib
#QMAKE_LFLAGS_RELEASE	=
#QMAKE_LFLAGS_DEBUG	=
#QMAKE_LFLAGS_SONAME	= 
#QMAKE_LFLAGS_THREAD	=
#QMAKE_RPATH		= 

QMAKE_LIBS		= -lc -lm -lstdc++ $$NDK_ROOT/build/platforms/android-4/arch-arm/usr/lib/crtbegin_dynamic.o $$NDK_ROOT/build/platforms/android-4/arch-arm/usr/lib/crtend_android.o $$NDK_ROOT/build/prebuilt/linux-x86/arm-eabi-4.2.1/bin/../lib/gcc/arm-eabi/4.2.1/interwork/libgcc.a
QMAKE_LIBS_X11		=
QMAKE_LIBS_X11SM	=
QMAKE_LIBS_QT		=
QMAKE_LIBS_QT_THREAD	=
QMAKE_LIBS_QT_OPENGL	=
QMAKE_LIBS_QTOPIA	=
QMAKE_LIBS_THREAD	=
QMAKE_LIBS_OPENGL	= -lGLESv1_CM

#QMAKE_MOC		= $$[QT_INSTALL_BINS]/moc
#QMAKE_UIC		= $$[QT_INSTALL_BINS]/uic

load(qt_config)
