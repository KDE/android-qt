/****************************************************************************
**
** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the test suite of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights.  These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
**
**
**
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/
/* NOTE: This file is AUTO GENERATED by qtokenautomaton2cpp.xsl. */

#ifndef q_noNamespace_h
#define q_noNamespace_h

#include <QtCore/QString>

QT_BEGIN_NAMESPACE

class NoNamespace
                {
                public:
                enum Token

                {
                NoKeyword,
AReallyLongTokenIFreakinMeanItUKnowUKnowKnow,
ColonInName,
FFFF,
FFFG,
FFGF,
FFGG,
FFLM,
WeHaveDashes,
WeHaveDashes2,
_,
_111,
wobbly
                };

                static inline Token toToken(const QString &value);
static inline Token toToken(const QStringRef &value);
static Token toToken(const QChar *data, int length);
static QString toString(Token token);


                private:
                    static inline Token classifier3(const QChar *data);
static inline Token classifier4(const QChar *data);
static inline Token classifier14(const QChar *data);
static inline Token classifier15(const QChar *data);
static inline Token classifier44(const QChar *data);

                };

                inline NoNamespace::Token NoNamespace::toToken(const QString &value)
                {
                    return toToken(value.constData(), value.length());
                }

                inline NoNamespace::Token NoNamespace::toToken(const QStringRef &value)
                {
                    return toToken(value.constData(), value.length());
                }

                
QT_END_NAMESPACE

#endif
